name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      TF_ENVIRONMENT:
        description: Terraform environment (e.g., dev, prod)
        required: true
        type: string
      ROLE_NAME:
        description: IAM role name to assume
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout infrastructure repo
        uses: actions/checkout@v4
        with:
          repository: madnansystems87/infrastructure-webapp
          ref: main

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ inputs.ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Generate tfvars file
        run: |
          cat > terraform/environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars <<EOF
          node_role_arn = "${{ secrets.NODE_ROLE_ARN }}"
          master_role_arn = "${{ secrets.MASTER_ROLE_ARN }}"
          key_name = "${{ secrets.KEY_NAME }}"
          users = [
            {
              user_arn = "${{ secrets.USER_1_ARN }}"
              username = "${{ secrets.USER_1_USERNAME }}"
              groups = ["system:masters"]
            },
            {
              user_arn = "${{ secrets.USER_2_ARN }}"
              username = "${{ secrets.USER_2_USERNAME }}"
              groups = ["system:masters"]
            }
          ]
          cluster_name = "${{ secrets.CLUSTER_NAME }}"
          cluster_version = "${{ secrets.CLUSTER_VERSION }}"
          node_group_name = "${{ secrets.NODE_GROUP_NAME }}"
          environment = "${{ inputs.TF_ENVIRONMENT }}"
          vpc_name = "${{ secrets.VPC_NAME }}"
          bastion_name = "${{ secrets.BASTION_NAME }}"
          kubeconfig_path = "${{ secrets.KUBECONFIG_PATH }}"
          region = "${{ secrets.AWS_REGION }}"
          cluster_alias = "${{ secrets.CLUSTER_ALIAS }}"
          aws_access_role = "${{ secrets.AWS_Access_ROLE_ARN }}"
          EOF

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="region=${{ secrets.S3_AWS_REGION }}" \
            -backend-config="bucket=${{ secrets.TF_STATE_S3_BUCKET }}" \
            -backend-config="key=${{ inputs.TF_ENVIRONMENT }}/${{ secrets.TF_STATE_FILE_KEY }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }}"

      - name: Terraform Destroy
        run: |
          terraform destroy \
            -var-file=terraform/environments/${{ inputs.TF_ENVIRONMENT }}/prod.tfvars \
            -auto-approve
